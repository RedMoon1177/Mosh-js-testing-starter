import { it, expect, describe, beforeAll, beforeEach, afterAll, afterEach } from 'vitest'
import { calculateDiscount, canDrive, fetchData, getCoupons, isPriceInRange, isValidUsername, Stack, validateUserInput } from '../src/core'

// describe('getCoupon', () => {
//     it('should return an array of coupons', () => {
//         const coupons = getCoupons();
//         // expect(coupons).toHaveLength(2);
//         expect(Array.isArray(coupons)).toBe(true);
//         expect(coupons.length).toBeGreaterThan(0);
//     });

//     it('should return an array with valid coupon codes', () => {
//         const coupons = getCoupons();
//         coupons.forEach(coupon => {
//             expect(coupon).toHaveProperty('code');
//             expect(typeof coupon.code).toBe('string');
//             expect(coupon.code).toBeTruthy();
//         });
//     });

//     it('should return an array with valid discounts', () => {
//         const coupons = getCoupons();
//         coupons.forEach(coupon => {
//             expect(coupon).toHaveProperty('discount');
//             expect(typeof coupon.discount).toBe('number');
//             expect(coupon.discount).toBeGreaterThan(0);
//             expect(coupon.discount).toBeLessThan(1);
//         })
//     })
// })

// describe('calculate Discount', () => {
//     it('should return discounted price if given valid code', () => {
//         expect(calculateDiscount(10, 'SAVE10')).toBe(9);
//         expect(calculateDiscount(10, 'SAVE20')).toBe(8);
//     });

//     it('should handle non-numeric price', () => {
//         expect(calculateDiscount('10', 'SAVE10')).toMatch(/invalid/i);
//     });

//     it('should handle negative price', () => {
//         expect(calculateDiscount(-10, 'SAVE10')).toMatch(/invalid/i);
//     });

//     it('should handle non-string discount code', () => {
//         expect(calculateDiscount(10, 10)).toMatch(/invalid/i);
//     });

//     it('should handle invalid discount price', () => {
//         expect(calculateDiscount(10, 'INVALID')).toBe(10);
//     });
// })

// describe('validateUserInput', () => {
//     it('should return success if given valid input ', () => {
//         expect(validateUserInput('mosh', 42)).toMatch(/success/i);
//     });

//     it('should return an error if username is not a string', () => {
//         expect(validateUserInput(1, 42)).toMatch(/invalid/i);
//     });

//     it('should return an error if username is less than 3 characters ', () => {
//         expect(validateUserInput('mo', 42)).toMatch(/invalid/i);
//     });

//     it('should return an error if username is longer than 255 characters ', () => {
//         expect(validateUserInput('A'.repeat(256), 42)).toMatch(/invalid/i);
//     });

//     it('should return an error if age is not a number ', () => {
//         expect(validateUserInput('mosh', '42')).toMatch(/invalid/i);
//     });

//     it('should return an error if age is less than 18 ', () => {
//         expect(validateUserInput('mo', 12)).toMatch(/invalid/i);
//     });

//     it('should return an error if age is greater than 100 ', () => {
//         expect(validateUserInput('mosh', 102)).toMatch(/invalid/i);
//     });

//     it('should return an error if both username and age are invalid ', () => {
//         expect(validateUserInput('', 0)).toMatch(/invalid username/i);
//         expect(validateUserInput('', 0)).toMatch(/invalid age/i);
//     });
// })

// describe('isPriceInRange', () => {
//     it('should return false when the price is outside the range', () => {
//         expect(isPriceInRange(-10, 0, 100)).toBe(false);
//         expect(isPriceInRange(200, 0, 100)).toBe(false);
//     });

//     it('should return false when the price is equal to the min or the max', () => {
//         expect(isPriceInRange(0, 0, 100)).toBe(true);
//         expect(isPriceInRange(100, 0, 100)).toBe(true);
//     });

//     it('should return false when the price is within the range', () => {
//         expect(isPriceInRange(50, 0, 100)).toBe(true);
//     });
// })

// 9 - Exercise: Testing isValidUsername
// My solution
// describe('isValidUsername', () => {
//     it('should return true if the length of username is valid', () => {
//         expect(isValidUsername('A'.repeat(5))).toBe(true);
//         expect(isValidUsername('A'.repeat(8))).toBe(true);
//         expect(isValidUsername('A'.repeat(15))).toBe(true);
//     })
//     it('should return false if length of username is invalid, meaning outside range of [5, 15]', () => {
//         for (let i = 0; i < 5; i++) {
//             expect(isValidUsername('A'.repeat(i))).toBe(false);
//         }

//         expect(isValidUsername('A'.repeat(16))).toBe(false);
//     })
// })

// Mosh solution
// describe('isValidUsername', () => {
//     const minLength = 5;
//     const maxLength = 15;

//     it('should return false if username is too short', () => {
//         expect(isValidUsername('a'.repeat(minLength - 1))).toBe(false);
//     });

//     it('should return false if username is too long', () => {
//         expect(isValidUsername('a'.repeat(maxLength + 1))).toBe(false);
//     });

//     it('should return false if username is at the min or max length', () => {
//         expect(isValidUsername('a'.repeat(minLength))).toBe(true);
//         expect(isValidUsername('a'.repeat(maxLength))).toBe(true);
//     });

//     it('should return false if username is within the length constraint', () => {
//         expect(isValidUsername('a'.repeat(minLength + 1))).toBe(true);
//         expect(isValidUsername('a'.repeat(maxLength - 1))).toBe(true);
//     });

//     it('should return false for invalid input types', () => {
//         expect(isValidUsername(null)).toBe(false);
//         expect(isValidUsername(undefined)).toBe(false);
//         expect(isValidUsername(1)).toBe(false);
//     });
// })




// describe('canDrive', () => {
//     it('should return error for invalid country code', () => {
//         expect(canDrive(20, 'FR')).toMatch(/invalid/i);
//     });


//     // US
//     it('should return false for underage in the US', () => {
//         expect(canDrive(15, 'US')).toBe(false);
//     });

//     it('should return true for minage in the US', () => {
//         expect(canDrive(16, 'US')).toBe(true);
//     });

//     it('should return true for eligible in the US', () => {
//         expect(canDrive(17, 'US')).toBe(true);
//     });


//     // UK
//     it('should return false for underage in the UK', () => {
//         expect(canDrive(16, 'UK')).toBe(false);
//     });

//     it('should return true for minage in the UK', () => {
//         expect(canDrive(17, 'UK')).toBe(true);
//     });

//     it('should return true for eligible in the UK', () => {
//         expect(canDrive(18, 'UK')).toBe(true);
//     });
// })

// 11 - Parameterized Tests
// describe('canDrive', () => {
//     it.each([
//         { age: 15, country: 'US', result: false },
//         { age: 16, country: 'US', result: true },
//         { age: 17, country: 'US', result: true },
//         { age: 16, country: 'UK', result: false },
//         { age: 17, country: 'UK', result: true },
//         { age: 18, country: 'UK', result: true },
//     ])('should return $result for $age, $country', ({ age, country, result }) => {
//         expect(canDrive(age, country)).toBe(result);
//     })
// })


// 12 - Exercise: Parameterized Tests
// my solution
// describe('isPriceInRange', () => {
//     it.each([
//         { price: -10, min: 0, max: 100, result: false },
//         { price: 200, min: 0, max: 100, result: false },
//         { price: 0, min: 0, max: 100, result: true },
//         { price: 100, min: 0, max: 100, result: true },
//         { price: 50, min: 0, max: 100, result: true },
//     ])('should return $result for $price, $min, $max', ({ price, min, max, result })=>{
//         expect(isPriceInRange(price, min, max)).toBe(result);
//     });
// })

// Mosh solution
// describe('isPriceInRange', () => {
//     it.each([
//         { scenario: 'price < min', price: -10, result: false },
//         { scenario: 'price > max', price: 200, result: false },
//         { scenario: 'price = min', price: 0, result: true },
//         { scenario: 'price = max', price: 100, result: true },
//         { scenario: 'price between min and max', price: 50, result: true },
//     ])('should return $result when $scenario', ({ price, result })=>{
//         expect(isPriceInRange(price, 0, 100)).toBe(result);
//     });
// })


// 13 - Testing Asynchronous Code
// describe('fetchData', () => {
//     it('should return a promise that will resolve to an array of numbers', async () => {

//         // solution 1:
//         try {
//             const result = await fetchData();
//         } catch (error) {
//             expect(error).toHaveProperty('reason');
//             expect(error.reason).toMatch(/fail/i);
//         }

//         // expect(Array.isArray(result)).toBe(true);
//         // expect(result.length).toBeGreaterThan(0);

//         // solution 2:
//         // fetchData().then((result) => {
//         //     expect(Array.isArray(result)).toBe(true);
//         //     expect(result.length).toBeGreaterThan(0);
//         // })

//     })
// })


// 14 - Setup and Teardown
// describe('test suit', () => {

//     beforeAll(() => { console.log('beforeAll called') });
//     beforeEach(() => { console.log('beforeEach called') });

//     afterEach(() => { console.log('afterEach called') });
//     // afterAll(() => { console.log('afterAll called') });

//     it('test case 1', () => { });
//     it('test case 2', () => { });
// })


// 15 - Exercise: Testing s Stack
// describe('Stack', () => {
//     let stack;

//     beforeEach(() => {
//         stack = new Stack();
//     });

//     it('push should add an item to the stack', () => {

//         stack.push(1);

//         expect(stack.size()).toBe(1);
//     });

//     it('pop should remove and return the top item from the stack', () => {
//         stack.push(1);
//         stack.push(2);

//         const poppedItem = stack.pop();

//         expect(poppedItem).toBe(2);
//         expect(stack.size()).toBe(1);
//     });

//     it('pop should throw an error if stack is empty', () => {
//         expect(() => stack.pop()).toThrow(/empty/i) // note: jest or Vitest will receive the error result from a call back function and handle it!!!
//     });

//     it('peek should return the top item from the stack without removing it', () => {
//         stack.push(1);
//         stack.push(2);

//         const peekedItem = stack.peek();

//         expect(peekedItem).toBe(2);
//         expect(stack.size()).toBe(2);
//     });

//     it('peek should throw an error if stack is empty', () => {
//         expect(() => stack.peek()).toThrow(/empty/i);
//     });

//     it('isEmpty should return true if stack is empty', () => {
//         expect(stack.isEmpty()).toBe(true);
//     });

//     it('isEmpty should return false if stack is not empty', () => {
//         stack.push(1);

//         expect(stack.isEmpty()).toBe(false);
//     });

//     it('size should return the number of items in the stack', () => {
//         stack.push(1);
//         stack.push(2);

//         expect(stack.size()).toBe(2);
//     });

//     it('clear should remove all items from the stack', () => {
//         stack.push(1);
//         stack.push(2);

//         stack.clear();

//         expect(stack.size()).toBe(0);
//     })
// })