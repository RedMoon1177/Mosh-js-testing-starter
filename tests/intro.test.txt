import { describe, test, it, expect } from "vitest";
import { calculateAverage, factorial, fizzBuzz, max } from "../src/intro";

describe('max', () => {
    it('should return the 1st argument if it is greater', () => {

        expect(max(2, 1)).toBe(2);
    })

    it('should return the 2nd argument if it is greater', () => {

        expect(max(1, 2)).toBe(2);
    })

    it('should return the 1st argument if arguments are equal', () => {

        expect(max(2, 2)).toBe(2);
    })
})


describe('fizzBuzz', () => {
    it('should return FizzBuzz if arg is divisible by 3 and 5', () => {
        expect(fizzBuzz(15)).toBe('FizzBuzz');
    })

    it('should return FizzBuzz if arg is only divisible by 3', () => {
        expect(fizzBuzz(6)).toBe('Fizz');
    })

    it('should return FizzBuzz if arg is only divisible by 5', () => {
        expect(fizzBuzz(25)).toBe('Buzz');
    })

    it('should return arg as a string if it is not divisible by 3 or 5', () => {
        expect(fizzBuzz(7)).toBe('7');
    })
})

describe('calculate average', () => {
    it('should return NAN if given an empty array', () => {
        expect(calculateAverage([])).toBe(NaN);
    })

    it('should calculate the average of an array with a single element', () => {
        expect(calculateAverage([1])).toBe(1);
    })

    it('should calculate the average of an array with a two elements', () => {
        expect(calculateAverage([1, 2])).toBe(1.5);
    })

    it('should calculate the average of an array with a three elements', () => {
        expect(calculateAverage([1, 2, 3])).toBe(2);
    })
})

describe('factorial',()=>{
    it('should return 1 if given 0',()=>{
        expect(factorial(0)).toBe(1);
    });

    it('should return 1 if given 1',()=>{
        expect(factorial(1)).toBe(1);
    });

    it('should return 2 if given 2',()=>{
        expect(factorial(2)).toBe(2);
    });

    it('should return 6 if given 3',()=>{
        expect(factorial(3)).toBe(6);
    });

    it('should return 4 if given 24',()=>{
        expect(factorial(4)).toBe(24);
    });

    it('should return undefined if given a negative number',()=>{
        expect(factorial(-1)).toBe(undefined);
    });
})